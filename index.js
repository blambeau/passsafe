CryptoJS = require('crypto-js/core');
pbkdf2   = require("crypto-js/pbkdf2");

Passsafe = module.exports = {};

Passsafe.DEFAULT_OPTIONS = {};

// Size of the salt to use
Passsafe.DEFAULT_OPTIONS.SALT_SIZE = 128/8;

// Size of the key to use
Passsafe.DEFAULT_OPTIONS.KEY_SIZE = 128/32;

// Number of iterations to use
Passsafe.DEFAULT_OPTIONS.ITERATIONS = 1000;

// ----------------------------------------------------------------------- Clear

/*
 * Creates and returns a password instance from a clear password text.
 *
 * @arg clearPassword: the password in plain clear text
 * @arg options: options to use (optional, defaults to Passafe.DEFAULT_OPTIONS)
 * @arg salt: salt to use (optional, defaults to autogenerated)
 * @return a password instance, that you can encrypt if needed.
 * @api public
 */
Passsafe.clear = function(clearPassword, options, salt) {
	return new Passsafe.Clear(clearPassword, options, salt);
};

/*
 * Creates a clear password instance.
 *
 * @arg clearPassword: the password in plain clear text
 * @arg options: options to use (optional)
 * @arg salt: some random salt (optional)
 * @return an instance of the Password.Clear class
 * @api private
 */
Passsafe.Clear = function(clearPassword, options, salt) {
	this.clearPassword = clearPassword;
	this.options = options || Passsafe.DEFAULT_OPTIONS;
	this.salt = salt || CryptoJS.lib.WordArray.random(this.options.SALT_SIZE);
};

/*
 * Returns a clear text version of the password.
 *
 * @api public
 * @return String an clear string version of the password
 */
Passsafe.Clear.prototype.toClear = function(){
	return this.clearPassword;
};

/*
 * Returns an encrypted text version of the password.
 *
 * @api public
 * @return String an encrypted string version of the password
 */
Passsafe.Clear.prototype.toEncrypted = function(){
	return this.encrypt().toEncrypted();
};

/*
 * Returns an decrypted version of this password.
 *
 * @api public
 * @return this.
 */
Passsafe.Clear.prototype.decrypt = function(){
	return this;
};

/*
 * Returns an encrypted version of this password.
 *
 * @api public
 * @return Passafe.Encrypted an encrypted instance.
 */
Passsafe.Clear.prototype.encrypt = function(){
	var encrypted = this.salt.toString(CryptoJS.enc.Hex) + CryptoJS.PBKDF2(this.clearPassword, this.salt, {
		keySize: this.options.KEY_SIZE,
		iterations: this.options.ITERATIONS
	});
	return Passsafe.encrypted(encrypted, this.options, this.salt);
};

/*
 * Check if the clear text password passed as argument is the same
 * password as this.
 *
 * @api public
 * @return true if same password, false otherwise.
 */
Passsafe.Clear.prototype.isValid = function(clearPassword){
	return this.clearPassword == clearPassword;
};

// ----------------------------------------------------------------------- Clear

/*
 * Creates and returns a password instance from an encrypted password text.
 *
 * @arg encryptedPassword: the password in plain encrypted text
 * @return an encrypted password instance.
 * @api public
 */
Passsafe.encrypted = function(encryptedPassword, options, salt) {
	return new Passsafe.Encrypted(encryptedPassword, options, salt);
};

/*
 * Creates an encrypted password instance.
 *
 * @arg encryptedPassword the password in encrypted plain text.
 * @return an instance of the Password.Encrypted class
 * @api private
 */
Passsafe.Encrypted = function(encryptedPassword, options, salt) {
	this.encryptedPassword = encryptedPassword;
	this.options = options || Passsafe.DEFAULT_OPTIONS;
	this.salt = salt || CryptoJS.enc.Hex.parse(encryptedPassword.slice(0, this.options.SALT_SIZE*2));
};

/*
 * Check if the clear text password passed as argument is the same
 * password as this.
 *
 * @api public
 * @return true if same password, false otherwise.
 */
Passsafe.Encrypted.prototype.isValid = function(clearPassword){
	return (Passsafe.clear(clearPassword, this.options, this.salt).toEncrypted() == this.encryptedPassword);
};

/*
 * Throws an error, as password hasing is one-way.
 *
 * @api public
 */
Passsafe.Encrypted.prototype.toClear = function(){
	throw "not supported: password hashing works one-way";
};

/*
 * Returns this password as a string.
 *
 * @return String the encrypted password as a plain text string.
 */
Passsafe.Encrypted.prototype.toEncrypted = function(){
	return this.encryptedPassword;
};

/*
 * Throws an error, as password hasing is one-way.
 *
 * @api public
 * @return this.
 */
Passsafe.Encrypted.prototype.decrypt = function(){
	throw "not supported: password hashing works one-way";
};

/*
 * Returns an encrypted version of this password.
 *
 * @api public
 * @return this.
 */
Passsafe.Encrypted.prototype.encrypt = function(){
	return this;
};
